(defun textmate-mode-hook ()
  (textmate-mode t)
  (global-set-key (kbd "M-RET") 'textmate-next-line)
  (global-set-key (kbd "M-/") 'comment-or-uncomment-region-or-line)
  (global-set-key (kbd "M-t") 'textmate-goto-file)
  (global-set-key (kbd "M-T") 'textmate-goto-symbol)
  (global-set-key (kbd "M-]") 'textmate-shift-right)
  (global-set-key (kbd "M-[") 'textmate-shift-left))

(defun ruby-mode-hook ()
  (autoload 'ruby-mode "ruby-mode" nil t)
  (add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))
  (add-hook 'ruby-mode-hook '(lambda ()
  (setq ruby-deep-arglist t)
  (setq ruby-deep-indent-paren nil)
  (setq c-tab-always-indent nil)
  (require 'inf-ruby)
  (require 'ruby-compilation)
  ;; (load "helpers/rails.el")
  ;; (define-key ruby-mode-map (kbd "M-r") 'run-rails-test-or-ruby-buffer)
  ;; (define-key ruby-mode-map (kbd "C-l") 'insert-ruby-hash-pointer)
)))

(defun rhtml-mode-hook ()
  (autoload 'rhtml-mode "rhtml-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . rhtml-mode))
  (add-to-list 'auto-mode-alist '("\\.rjs\\'" . rhtml-mode))
  (add-hook 'rhtml-mode '(lambda ()
  (define-key rhtml-mode-map (kbd "M-s") 'save-buffer)
  ;; (define-key rhtml-mode-map (kbd "C-l") 'insert-ruby-hash-pointer)
  (define-key rhtml-mode-map (kbd "C->") 'insert-erb-skeleton)
  (define-key rhtml-mode-map (kbd "C-M->") (lambda ()
                                             (interactive)
                                             (insert-erb-skeleton 0))))))

(defun yaml-mode-hook ()
  (autoload 'yaml-mode "yaml-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode)))

(defun css-mode-hook ()
  (autoload 'css-mode "css-mode" nil t)
  (add-hook 'css-mode-hook '(lambda ()
                              (setq css-indent-level 2)
                              (setq css-indent-offset 2))))

(defun buffer-move-hook ()
  (global-set-key (kbd "<C-S-up>")    'buf-move-up)
  (global-set-key (kbd "<C-S-down>")  'buf-move-down)
  (global-set-key (kbd "<C-S-left>")  'buf-move-left)
  (global-set-key (kbd "<C-S-right>") 'buf-move-right))
